homeassistant:
  customize:
    sensor.vacuum_start_time_weekdays:
      icon: 'mdi:clock-check'
    sensor.vacuum_start_time_weekend:
      icon: 'mdi:clock-check'
    vacuum.jarvis_clean:
      friendly_name: "Vacuum Jarvis Cleaner"
    script.vacuum_start:
      friendly_name: "Inizia Pulizia"
      icon: 'mdi:play'
    script.vacuum_pause:
      friendly_name: "Pausa"
      icon: 'mdi:pause'
    script.vacuum_stop:
      friendly_name: "Stop"
      icon: 'mdi:stop'
    script.vacuum_return_to_base:
      friendly_name: "Ritorna alla Base"
      icon: 'mdi:vhs'
    script.vacuum_locate:
      friendly_name: "Localizza"
      icon: 'mdi:map-marker'
    script.vacuum_tutta_casa:
      icon: 'mdi:play'
    script.reset_main_brush_left_work_time:
      icon: 'mdi:broom'
    script.reset_side_brush_work_time:
      icon: 'mdi:robot-vacuum'
    script.reset_filter_work_time:
      icon: 'mdi:air-filter'
    script.reset_sensor_dirty_work_time:
      icon: 'mdi:leak'
    sensor.vacuum_main_brush:
      icon: 'mdi:broom'
    sensor.vacuum_side_brush:
      icon: 'mdi:robot-vacuum'
    sensor.vacuum_filter:
      icon: 'mdi:air-filter'
    sensor.vacuum_sensor:
      icon: 'mdi:leak'

# Declare into integration UI Xiaomi MIIO
#vacuum:
#  - platform: xiaomi_miio
#    host: 192.168.1.40
#    token: 38xxxxxxxxxxxxxx777468
#    name: "Jarvis Clean"

camera:
  - platform: xiaomi_cloud_map_extractor
    host: 192.168.1.40
    token: 38684c345372766535516a4354777468
    username: username
    password: password
    country: "de"
    name: "Jarvis Clean"
    colors:
      color_map_inside: [0, 0, 0]
      color_map_outside: [0, 0, 0, 0.5]
      color_path: [0, 0, 0]
      color_goto_path: [0, 0, 0]
      color_predicted_path: [255, 255, 0, 0]
      color_charger: [255, 0, 0,]
      color_robo: [255,255,255]
    draw:
      - charger
      - path
      - no_go_zones
      - vacuum_position
      - virtual_walls
    map_transformation:
      scale: 1
      trim:
        top: 10
        bottom: 10
        left: 20
        right: 20
    sizes:
      charger_radius: 4
      vacuum_radius: 4.5
    attributes:
      - calibration_points
      - charger
      - goto
      - goto_path
      - goto_predicted_path
      - image
      - map_name
      - no_go_areas
      - no_mopping_areas
      - obstacles
      - path
      - room_numbers
      - rooms
      - vacuum_position
      - vacuum_room
      - walls
      - zones
    scan_interval:
      seconds: 10
    auto_update: true


input_boolean:    
  vacuum_zone_settings:
    icon: mdi:map-search
    name: zone settings
    initial: false
  vacuum_active_timer:
    icon: mdi:timer
    name: Attiva Schedule Pulizia
    initial: true
input_select:
  vacuum_fan_speed_select:
    name: Selezione Aspirazione
    options:
      - Silenziosa
      - Bilanciata
      - Media
      - Turbo
      - Delicato
  vacuum_zone:
    name: Scelta Zona
    initial: 'Scegli la zona'
    options:
      - Scegli la zona
      - Cucina
      - Sala
      - Bagno Rosa
      - Bagno Celeste
      - Solo Bagni
      - Camera Matrimoniale
      - Cameretta
      - Zona Guirno
      - Tutta casa

input_number:
  vacuum_passes:
    name: Quante volte?
    #initial: 2
    min: 1
    max: 3
    step: 1
  vacuum_start_minutes_weekend:
    name: Start minute
    #initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  vacuum_start_hour_weekend:
    name: Start hour
    #initial: 13
    min: 0
    max: 23
    step: 1
    mode: slider
  vacuum_start_minutes_weekdays:
    name: Start minute
    #initial: 0
    min: 0
    max: 59
    step: 1
    mode: slider
  vacuum_start_hour_weekdays:
    name: Start hour
    #initial: 15
    min: 0
    max: 23
    step: 1
    mode: slider

script:
  vacuum_start:
    sequence:
      - service: vacuum.start
        data: { "entity_id":"vacuum.jarvis_clean"}

  vacuum_pause:
    sequence:
      - service: vacuum.pause
        data: { "entity_id":"vacuum.jarvis_clean"}

  vacuum_stop:
    sequence:
      - service: vacuum.stop
        data: { "entity_id":"vacuum.jarvis_clean"}

  vacuum_return_to_base:
    sequence:
      - service: vacuum.return_to_base
        data: { "entity_id":"vacuum.jarvis_clean"}

  vacuum_locate:
    sequence:
      - service: vacuum.locate
        data: { "entity_id":"vacuum.jarvis_clean"}

  vacuum_clean_spot:
    sequence:
      - service: vacuum.clean_spot
        data: { "entity_id":"vacuum.jarvis_clean"}        

  vacuum_turn_on:
    sequence:
      - service: vacuum.turn_on
        data: { "entity_id":"vacuum.jarvis_clean"}        
  
  vacuum_turn_off:
    sequence:
      - service: vacuum.turn_off
        data: { "entity_id":"vacuum.jarvis_clean"}        

### SET VELOCITY VACUUM
#['Silent', 'Standard', 'Medium', 'Turbo']

  vacuum_set_quiet:
    sequence:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.jarvis_clean
          fan_speed: Silent

  vacuum_set_standard:
    sequence:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.jarvis_clean
          fan_speed: Standard

  vacuum_set_turbo:
    sequence:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.jarvis_clean
          fan_speed: Turbo
 
  vacuum_set_medium:
    sequence:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.jarvis_clean
          fan_speed: Medium

  vacuum_set_gentle:
    sequence:
      - service: vacuum.set_fan_speed
        data:
          entity_id: vacuum.jarvis_clean
          fan_speed: Gentle
#Alerts

  vacuum_alert_start:
    alias: Vacuum alert start
    mode: queued
    sequence:
    - service: script.invia_notifiche_telegram_html5
      data:
        message: >-
          🧹<strong>Il robot ha iniziato la pulizia .... </strong>
          {%- if states('input_select.vacuum_zone')|trim != 'Scegli la zona' -%}
          <strong>della zona {{ states('input_select.vacuum_zone')|trim | lower }}.</strong>
          {%- else -%}
          <strong>della casa.</strong>
          {% endif %}
    - service: script.invia_tts_mediaplayer
      data:
        message: >-
          Sto iniziando la pulizia ...
          {% if states('input_select.vacuum_zone')|trim != 'Scegli la zona' %}
          della zona {{ states('input_select.vacuum_zone')|trim | lower }}.
          {% endif %}

  vacuum_alert_pause:
    alias: Vacuum alert pausa
    sequence:
    - service: script.invia_notifiche_telegram_html5
      data:
        message: >-
          L'aspirapolvere è in pausa, ha smesso di pulire 
          {% if states('input_select.vacuum_zone')|trim != 'Scegli la zona' %}
           La Zona {{ states('input_select.vacuum_zone')|trim | lower }}.
          {% endif %}          
          {% if 'error' in states('vacuum.jarvis_clean')|trim %}Codice di errore: {{ state_attr('vacuum.jarvis_clean','error') }}.{% else %}{% endif %}
    - service: script.invia_tts_mediaplayer
      data:
        message: >-
          L'aspirapolvere è in pausa, ha smesso di pulire
          {% if states('input_select.vacuum_zone')|trim != 'Scegli la zona' %}
           La Zona {{ states('input_select.vacuum_zone')|trim | lower }}.
          {% endif %}          
          {% if 'error' in states('vacuum.jarvis_clean')|trim %}Codice di errore: {{ state_attr('vacuum.jarvis_clean','error') }}.{% else %}{% endif %}

  vacuum_alert_back_to_home:
    alias: Vacuum alert back to home
    sequence:
    - condition: template
      value_template: "{% if is_state('input_select.vacuum_zone', 'Scegli la zona') %}False{% else %}True{% endif %}"
    - service: script.invia_notifiche_telegram_html5
      data:
        message: >-
          Il robot ha terminato la pulizia della zona {{ states('input_select.vacuum_zone')|trim | lower }}. Puliti {{ state_attr('vacuum.jarvis_clean','cleaned_area')|int }} metri quadri in {{  state_attr('vacuum.jarvis_clean','cleaning_time')|int }} minuti e ora si sta caricando
    - service: script.invia_tts_mediaplayer
      data:
        message: >-
          Eccomi! Il robot ha terminato la pulizia della zona {{ states('input_select.vacuum_zone')|trim | lower }}. Puliti {{ state_attr('vacuum.jarvis_clean','cleaned_area')|int }} metri quadri in {{ state_attr('vacuum.jarvis_clean','cleaning_time')|int }} minuti e ora si sta caricando.

  vacuum_alert_error:
    alias: Vacuum alert error
    sequence:
    - service: script.invia_notifiche_telegram_html5
      data:
        message: >-
          L'aspirapolvere si è fermato e ha segnalato un errore durante la pulizia .
          {% if states('input_select.vacuum_zone') != 'Scegli la zona' %}
          Zona {{ states('input_select.vacuum_zone')| lower }}.
          {% endif %}
    - service: script.invia_tts_mediaplayer
      data:
        message: >-
          Attenzione! L'aspirapolvere si è fermato e ha segnalato un errore durante la pulizia.
          {% if states('input_select.vacuum_zone') != 'Scegli la zona' %}
          Zona {{ states('input_select.vacuum_zone') | lower }}.
          {% endif %}

  vacuum_alert_charging:
    alias: Vacuum alert Charging
    sequence:
    - service: script.invia_notifiche_telegram_html5
      data:
        message: >-
          L'aspirapolvere si è fermato per ricaricarsi .
          Se sta finendo un'operazione di pulizia , riprenderà successivamente.
    - service: script.invia_tts_mediaplayer
      data:
        message: >-
          L'aspirapolvere si è fermato per ricaricarsi .
          Se sta finendo un'operazione di pulizia , riprenderà successivamente.


  vacuum_tutta_casa:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21073,22879,29873,35429]] 
    - service: script.vacuum_alert_start
  
  vacuum_cucina:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21077,22752,25477,25352]]
    - service: script.vacuum_alert_start
  
  vacuum_sala:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21194,24853,30194,29153],[24426,29145,30026,31295]]
    - service: script.vacuum_alert_start
  vacuum_bagno_rosa:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21229,29072,25029,31372]]
    - service: script.vacuum_alert_start
  vacuum_bagno_celeste:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[25775,22738,29825,24788]]
    - service: script.vacuum_alert_start
  vacuum_bagni:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[25605,22833,29805,24983],[21378,29230,24728,31380]]
    - service: script.vacuum_alert_start
  vacuum_camera:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21073,31379,25923,35429]]
    - service: script.vacuum_alert_start
  vacuum_cameretta:
    sequence:
    - service: xiaomi_miio.vacuum_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[25927,30995,30127,35395]]
    - service: script.vacuum_alert_start
  vacuum_zona_giorno:
    sequence:
    - service: vacuum.xiaomi_clean_zone
      data:
        entity_id: vacuum.jarvis_clean
        repeats: '{{states("input_number.vacuum_passes")|int}}'
        zone: [[21350,23010,25550,25160],[21294,24989,30044,29089],[24463,29107,30213,31307]]
    - service: script.vacuum_alert_start

##### reset sensori polvere    

# spazzola centrale
  reset_main_brush_left_work_time:
    alias: "Reset Pulizia Spazzola Principale"
    mode: queued
    sequence:
      - service: vacuum.send_Command
        data:
          entity_id: vacuum.jarvis_clean
          command: reset_consumable
          params: ['main_brush_work_time']

# spazzola sinistra rotante
  reset_side_brush_work_time:
    alias: "Reset Pulizia Spazzola Laterale"
    mode: queued
    sequence:
      - service: vacuum.send_Command
        data:
          entity_id: vacuum.jarvis_clean
          command: reset_consumable
          params: ['side_brush_work_time']

# filtro polvere
  reset_filter_work_time:
    alias: "Reset Pulizia Filtro"
    mode: queued
    sequence:
      - service: vacuum.send_Command
        data:
          entity_id: vacuum.jarvis_clean
          command: reset_consumable
          params: ['filter_work_time']           

# sensori vari
  reset_sensor_dirty_work_time:
    alias: "Reset Pulizia Sensori"
    mode: queued
    sequence:
      - service: vacuum.send_Command
        data:
          entity_id: vacuum.jarvis_clean
          command: reset_consumable
          params: ['sensor_dirty_time']
        


sensor:
  - platform: template
    sensors:
      vacuum_status:
        friendly_name: "Stato Jarvis Clean"
        value_template: >
          {% set vacuumset = states("vacuum.jarvis_clean") %}
          {% if vacuumset == 'charging' %}
            In Carica
          {% elif vacuumset == 'cleaning' %}
            In Pulizia
          {% elif vacuumset == 'returning' %}
            Ritorno alla Base
          {% elif vacuumset == 'idle' %}
            Fermo
          {% elif vacuumset == 'paused' %}
            Pausa
          {% elif vacuumset == 'error' %}
            In Errore            
          {% else %}
            Alla Base
          {% endif %}
        icon_template: >
          {% set vacuumset =  states("vacuum.jarvis_clean")|trim  %}
          {% if vacuumset == 'charging' %}
            mdi:battery-charging
          {% elif vacuumset == 'cleaning' %}
            mdi:move-resize
          {% elif vacuumset == 'returning' %}
            mdi:keyboard-return
          {% elif vacuumset == 'idle' %}
            mdi:dots-horizontal
          {% elif vacuumset == 'paused' %}
            mdi:pause-circle
          {% elif vacuumset == 'docked' %}
            mdi:home-assistant
          {% elif vacuumset == 'error' %}
            mdi:alert-circle-outline
          {% else %}
            mdi:help-circle
          {% endif %}


      vacuum_battery:
        friendly_name: "Batteria Jarvis Cleaner"
        value_template: >
          {% set battery = state_attr('vacuum.jarvis_clean','battery_level')|int %}
          {{ battery }}
        unit_of_measurement: '%'
        icon_template: >
         {% set battery = state_attr('vacuum.jarvis_clean','battery_icon')|trim|lower %}
         {% if battery is not in ['none','unknown','unavailable'] %}
           {{ battery }}
         {% else %}
           mdi:battery-charging-wireless-alert
         {% endif %}        
  
      vacuum_cleaned_area:
        friendly_name: "Ultima area Pulita"
        unit_of_measurement: 'm²'
        value_template: "{{ states('sensor.jarvis_clean_last_clean_area')}}"
        icon_template: 'mdi:ruler'
      
      vacuum_cleaned_time:
          friendly_name: "Timer Pulizia"
          unit_of_measurement: 'min'
          value_template: "{{(states('sensor.jarvis_clean_last_clean_duration')|int/60)|int }}"
          icon_template: 'mdi:clock'
      
      vacuum_fan_speed:
          friendly_name: "Timer Pulizia"
          unit_of_measurement: ''
          value_template: >
            {% set speed = state_attr('vacuum.jarvis_clean','fan_speed')|trim  %}
            {{ speed }}
          icon_template: 'mdi:fan'    
      
      vacuum_main_brush:
        friendly_name: "Vacuum - Spazzola Principale"
        value_template: "Spazzola Principale: {{ (states('sensor.jarvis_clean_main_brush_left')|float/3600)|int }} h"
      
      vacuum_side_brush:
        friendly_name: "Vacuum - Spazzola Laterale"
        value_template: "Spazzola Laterale: {{ (states('sensor.jarvis_clean_side_brush_left')|float/3600)|int }} h"
      
      vacuum_filter:
        friendly_name: "Vacuum - Filtro"
        value_template: "Filtro: {{ (states('sensor.jarvis_clean_filter_left')|float/3600)|int }} h"
      
      vacuum_sensor:
        friendly_name: "Vacuum - Sensori"
        value_template: "Sensori: {{ (states('sensor.jarvis_clean_sensor_dirty_left')|float/3600)|int }} h"
        
      
      vacuum_start_time_weekdays:
        friendly_name: 'Ora Inizio (feriali)'
        value_template: >
          {% set time = states("vacuum.jarvis_clean") %}
          {{ "%0.02d:%0.02d" | format(states("input_number.vacuum_start_hour_weekdays") | int, states("input_number.vacuum_start_minutes_weekdays") | int) }}
        
      vacuum_start_time_weekend:
        friendly_name: 'Ora Inizio (weekend)'
        value_template: >
          {% set time = states("vacuum.jarvis_clean") %}
          {{ "%0.02d:%0.02d" | format(states("input_number.vacuum_start_hour_weekend") | int, states("input_number.vacuum_start_minutes_weekend") | int) }}
        

automation:

  - id: a5768e26-a193-4661-af0c-4f7932b777b9
    alias: 'Jarvis Pulzia Vacuum Terminata'
    initial_state: 'true'
    mode: queued
    trigger:      
      - platform: state
        entity_id: sensor.vacuum_status
        to: "Alla Base"
        for: "00:05"
    condition :
      - condition: template
        value_template: >-
          {{ state_attr('vacuum.jarvis_clean','battery_level')|int > 19 
          and state_attr('vacuum.jarvis_clean','cleaned_area')|int > 5
          and state_attr('vacuum.jarvis_clean','cleaning_time')|int > 10 
          and states('sensor.vacuum_status')|trim != 'In Carica' 
          and states('vacuum.jarvis_clean')|trim != 'error'
          and states('input_select.vacuum_zone')|trim == 'Scegli la zona' }}
    action: 
      - wait_template: "{{ states('vacuum.jarvis_clean') not in ['unavailable','unknown','none'] }}"
        timeout: "00:30:00"    
      - delay: '00:01:00'
      - service: script.invia_video_telegram
        data:
          message: >
            La Pulizia della casa è Terminata : {{now().strftime("%H:%M:%S del %d.%m.%Y")}}{{"\n"}}
            Durata Pulizia : {{ state_attr('vacuum.jarvis_clean','cleaning_time') }} min{{"\n"}}
            Puliti : {{ state_attr('vacuum.jarvis_clean','cleaned_area') }} m2{{"\n"}}
            Tipo Pulizia : {{ state_attr('vacuum.jarvis_clean','fan_speed') }}{{"\n"}}
            Passate: {{ states('input_number.vacuum_passes')|int}}
          url: "your_site.duckdns.org/local/immagini/lovelace/2_vacuum.gif"
      - delay: '00:00:03'
      - service: script.invia_foto_telegram
        data:
          message: '{{now().strftime("%H:%M:%S del %d.%m.%Y")}}'
          url: 'your_site.duckdns.org{{state_attr("camera.jarvis_clean","entity_picture")}}'          
      ###### For Clean Map on Camera
      - delay: "00:00:01"
      - service: script.vacuum_start
      - delay: "00:00:01"
      - service: script.vacuum_stop
      - delay: "00:00:02"
      - service: script.vacuum_return_to_base

  - id: dd189923-d362-480d-8c8f-a880408151f6
    alias: 'Jarvis Avvio Pulizia con Allarme'
    initial_state: 'true'
    trigger:
      - platform: state
        entity_id: vacuum.jarvis_clean
        to: "cleaning"
    condition:
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: 'armed_away'
    action:
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.home_alarm
      - delay: '00:00:10'
      - service: alarm_control_panel.alarm_arm_home
        entity_id: alarm_control_panel.home_alarm
      - delay: '00:00:10'
      - wait_template : "{{ is_state('vacuum.jarvis_clean','docked') }}"
        timeout: '05:00:00'
      - condition: state
        entity_id: alarm_control_panel.home_alarm
        state: 'armed_home'
      - service: alarm_control_panel.alarm_disarm
        entity_id: alarm_control_panel.home_alarm
      - delay: '00:00:05'
      - service: alarm_control_panel.alarm_arm_away
        entity_id: alarm_control_panel.home_alarm
      
  - id: f8cc9071-a6d1-4b07-b8d4-c944e24e9cc1
    alias: Vacuum - Velocità di aspirazione Select
    initial_state: 'true'
    trigger:
      - platform: state
        entity_id: input_select.vacuum_fan_speed_select
    action:
      - service_template: >
          {% if trigger.to_state.state == 'Silenziosa' %}
            script.vacuum_set_quiet
          {% elif trigger.to_state.state == 'Bilanciata' %}
            script.vacuum_set_standard
          {% elif trigger.to_state.state == 'Turbo' %}
            script.vacuum_set_turbo
          {% elif trigger.to_state.state == 'Media' %}
            script.vacuum_set_medium
          {% elif trigger.to_state.state == 'Delicato' %}
            script.vacuum_set_gentle            
          {% endif %}    

  - id: 1ea2cbd1-4dd5-4581-b024-c081d6435730
    alias: Vacuum Schedule cleaning on weekends
    initial_state: true
    trigger:
      - platform: template
        value_template: '{{ states("sensor.vacuum_start_time_weekend") == states("sensor.time") }}'
      - platform: template
        value_template: '{{ states("sensor.vacuum_start_time_weekdays") == states("sensor.time") }}'
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: '{{ states("sensor.vacuum_start_time_weekend") == states("sensor.time") }}'            
              - condition: time
                weekday:
                  - sun
              - condition: template
                value_template: "{{ (states['person'] | selectattr('state', '==' , 'home') | list | count) == 0 }}"
              - condition: state
                entity_id: input_boolean.vacuum_active_timer
                state: 'on'          
            sequence:
              - service: script.vacuum_tutta_casa
          - conditions:
              - condition: template
                value_template: '{{ states("sensor.vacuum_start_time_weekdays") == states("sensor.time") }}'
              - condition: time
                weekday:
                  - tue
                  - thu
                  - fri
              - condition: template
                value_template: "{{ (states['person'] | selectattr('state', '==' , 'home') | list | count) == 0 }}"
              - condition: state
                entity_id: input_boolean.vacuum_active_timer
                state: 'on'
            sequence:
              - service: script.vacuum_tutta_casa

              
  - id: edfeb6ea-eddb-465e-afbd-d8d2da2aabb1
    mode: queued
    alias: Vacuum Avvisi
    initial_state: true
    trigger:
      - platform: state
        entity_id: vacuum.jarvis_clean
        to: 'paused'
        for:
          hours: 0
          minutes: 0
          seconds: 30
      - platform: state
        entity_id: vacuum.jarvis_clean
        to: 'error'
      - platform: state
        entity_id: vacuum.jarvis_clean
        to: 'charging'        
    action:
      - service_template: >
          {% if trigger.to_state.state == 'paused' %}
            script.vacuum_alert_pause
          {% elif trigger.to_state.state == 'charging' %}
            script.vacuum_alert_charging
          {% elif trigger.to_state.state == 'error' %}
            script.vacuum_alert_error
          {% endif %}          

  - id: 3b0dbf34-470a-4dda-b305-55a37b1d5053
    alias: Vacuum - Selezione della zona
    initial_state: true
    trigger:
      platform: state
      entity_id: input_select.vacuum_zone
      from: 'Scegli la zona'
    action:
      - service_template: >
          {% if states('input_select.vacuum_zone') == "Tutta Casa" %}
            script.vacuum_tutta_casa
          {% elif states('input_select.vacuum_zone') == "Cucina" %}
            script.vacuum_cucina
          {% elif states('input_select.vacuum_zone') == "Sala" %}
            script.vacuum_sala
          {% elif states('input_select.vacuum_zone') == "Bagno Rosa" %}
            script.vacuum_bagno_rosa
          {% elif states('input_select.vacuum_zone') == "Bagno Celeste" %}
            script.vacuum_bagno_celeste
          {% elif states('input_select.vacuum_zone') == "Camera Matrimoniale" %}
            script.vacuum_camera
          {% elif states('input_select.vacuum_zone') == "Cameretta" %}
            script.vacuum_cameretta
          {% elif states('input_select.vacuum_zone') == "Zona giorno" %}
            script.vacuum_zona_giorno
          {% elif states('input_select.vacuum_zone') == "Solo Bagni" %}
            script.vacuum_bagni
          {% else %}
          {% endif %}
      - delay: 00:01:00
      - wait_template: "{{is_state('vacuum.jarvis_clean', 'docked')}}"
      - delay: 00:00:15
      - service: input_select.select_option
        entity_id: input_select.vacuum_zone
        data:
          option: "Scegli la zona"
      - service: input_select.select_option
        entity_id: input_select.vacuum_fan_speed_select
        data:
          option: "Turbo"

  - id: d40f0d8c-fd61-434b-a0b2-6e0f4dc1d8ab
    alias: Vacuum - ricorda pulizia sensori
    initial_state: true
    mode: queued
    trigger:
      - platform: template
        value_template: "{{ state_attr('vacuum.jarvis_clean','main_brush_left')|int <= 5 }}"
      - platform: template
        value_template: "{{ state_attr('vacuum.jarvis_clean','side_brush_left')|int <= 5 }}"
      - platform: template
        value_template: "{{ state_attr('vacuum.jarvis_clean','filter_left')|int <=  5 }}"
      - platform: template
        value_template: "{{ state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int <= 5 }}"         
    condition:
      - condition: template
        value_template: "{{ states('vacuum.jarvis_clean') not in ['unavailable','unknown','none'] }}"    
    action:
      - service: script.invia_notifiche_telegram_html5
        data:
          message: >-
            <strong>🆘 Il Vacuum ha bisogno del tagliando :</strong> {{"\n"}}
             {%- if state_attr('vacuum.jarvis_clean','main_brush_left')|int <= 5 %}
             🧹 Pulizia Spazzola laterale, mancano {{ state_attr('vacuum.jarvis_clean','main_brush_left')|int }} h alla saturazione
             {% endif %}
             {%- if state_attr('vacuum.jarvis_clean','side_brush_left')|int <= 5 %}
             🚿 Pulizia Spazzola principale, mancano {{ state_attr('vacuum.jarvis_clean','side_brush_left')|int }} h alla saturazione
             {% endif %}
             {%- if state_attr('vacuum.jarvis_clean','filter_left')|int <= 5 %}
             🩸 Pulizia Filtro, mancano {{ state_attr('vacuum.jarvis_clean','filter_left')|int }} h alla saturazione
             {% endif %}
             {%- if state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int <= 5 %}
             🧽 Pulizia Sensori, mancano {{ state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int }} h alla saturazione
             {% endif %}

      - service: notify.telegram
        data:
          title: ''
          message: ' <strong>* 🚧 Vuoi Resettare il sensore  🚧 * </strong>'
          data:
            inline_keyboard:
              - '🚿 Si:/Si_vacuum, 🩸 No:/No_vacuum'
              - '❌ Chiudi:/removekeyboard'
      - service: script.invia_tts_mediaplayer
        data:
          message: >-
             Il Vacuum ha bisogno del tagliando :
             {% if state_attr('vacuum.jarvis_clean','main_brush_left')|int <= 5 %}
             Pulizia Spazzola laterale, mancano {{ state_attr('vacuum.jarvis_clean','main_brush_left')|int }} ore alla saturazione
             {% endif %}
             {% if state_attr('vacuum.jarvis_clean','side_brush_left')|int <= 5 %}
             Pulizia Spazzola principale, mancano {{ state_attr('vacuum.jarvis_clean','side_brush_left')|int }} ore alla saturazione
             {% endif %}
             {% if state_attr('vacuum.jarvis_clean','filter_left')|int <= 5 %}
             Pulizia Filtro, mancano {{ state_attr('vacuum.jarvis_clean','filter_left')|int }} ore alla saturazione
             {% endif %}
             {% if state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int <= 5 %}
             Pulizia Sensori, mancano {{ state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int }} ore alla saturazione
             {% endif %}    

  - id: 70fec8be-ad27-451f-a976-77eb55e92e18
    alias: 'Vacuum reset sensor'
    initial_state: 'true'
    mode: queued
    trigger:
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/Si_vacuum'
      - platform: event
        event_type: telegram_callback
        event_data:
          data: '/No_vacuum'
    action:
      - choose:
        - conditions:
            - condition: template
              value_template: "{{ state_attr('vacuum.jarvis_clean','main_brush_left')|int <= 5 }}"
            - condition: template
              value_template: "{{ 'true' if  trigger.event.data.data|trim in ['/Si_vacuum'] else 'false' }}"
          sequence:
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ trigger.event.data.message.message_id }}"
                chat_id: "{{ trigger.event.data.message.chat.id }}"
                title: ""
                message: >
                  --> ✔️🆗 Sensore Spazzola Principale Resettato
                inline_keyboard: [ ]
            - service: script.reset_main_brush_left_work_time
        - conditions:
            - condition: template
              value_template: "{{ state_attr('vacuum.jarvis_clean','side_brush_left')|int <= 5 }}"
            - condition: template
              value_template: "{{ 'true' if  trigger.event.data.data|trim in ['/Si_vacuum'] else 'false' }}"
          sequence:
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ trigger.event.data.message.message_id }}"
                chat_id: "{{ trigger.event.data.message.chat.id }}"
                title: ""
                message: >
                  --> ✔️🆗 Sensore Spazzola Laterale Resettato
                inline_keyboard: [ ]
            - service: script.reset_side_brush_work_time
        - conditions:
            - condition: template
              value_template: "{{ state_attr('vacuum.jarvis_clean','filter_left')|int <= 5 }}"
            - condition: template
              value_template: "{{ 'true' if  trigger.event.data.data|trim in ['/Si_vacuum'] else 'false' }}"
          sequence:
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ trigger.event.data.message.message_id }}"
                chat_id: "{{ trigger.event.data.message.chat.id }}"
                title: ""
                message: >
                  --> ✔️🆗 Sensore Filtro Resettato
                inline_keyboard: [ ]
            - service: script.reset_filter_work_time
        - conditions:
            - condition: template
              value_template: "{{ state_attr('vacuum.jarvis_clean','sensor_dirty_left')|int <= 5 }}"
            - condition: template
              value_template: "{{ 'true' if  trigger.event.data.data|trim in ['/Si_vacuum'] else 'false' }}"
          sequence:
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ trigger.event.data.message.message_id }}"
                chat_id: "{{ trigger.event.data.message.chat.id }}"
                title: ""
                message: >
                  --> ✔️🆗 Pulizia Sensori Resettato
                inline_keyboard: [ ]
            - service: script.reset_sensor_dirty_work_time 
        - conditions:
            - condition: template
              value_template: "{{ 'true' if  trigger.event.data.data|trim in ['/No_vacuum'] else 'false' }}"
          sequence:
            - service: telegram_bot.edit_message
              data:
                message_id: "{{ trigger.event.data.message.message_id }}"
                chat_id: "{{ trigger.event.data.message.chat.id }}"
                title: ""
                message: >
                  --> ❌✔️🆗 Lascio tutti i sensori invariti 👍🏿
                inline_keyboard: [ ]
                        

  - id: 189b9200-ebba-47f6-ab90-f72901e789b6
    alias: 'Vacuum go to cleaner box'
    initial_state: 'true'
    mode: queued
    trigger:
      - platform: state
        entity_id: person.clark_kent
        to: "home"
        for: "00:05:00"
    condition:        
      - condition: time
        after: "18:00:00"
        before: "22:30:00"     
        weekday:
          #- mon
          - mon
    action:
     - wait_template: "{{ states('vacuum.jarvis_clean') not in ['unavailable','unknown','none'] }}"
       timeout: "00:30:00"    
     - service: xiaomi_miio.vacuum_goto
       entity_id: vacuum.jarvis_clean
       data:
         x_coord: 21944
         y_coord: 24004
     - service: script.invia_tts_mediaplayer
       data:
         message: >-
           Clark, togli la polvere da Jarvis, ti sta aspettando!
